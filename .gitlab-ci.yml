stages:
  - Static Analysis
  - Test
  - Release
  - Deploy

flake8:
  stage: Static Analysis
  image: python:3.11-slim
  rules:
    - if: "$CI_COMMIT_TAG == null"
  before_script:
    - python -V
    - python -m pip install flake8
  script:
    - flake8 src --ignore=E501 | tee flake8_report.txt
  artifacts:
    when: on_failure
    paths:
      - flake8_report.txt
pylint:
  stage: Static Analysis
  image: python:3.11-slim
  rules:
    - if: "$CI_COMMIT_TAG == null"
  before_script:
    - python -V
    - python -m pip install -r requirements.txt
    - python -m pip install pylint
  script:
    - pylint --fail-under=6 src | tee pylint_report.txt
  artifacts:
    when: always
    paths:
      - pylint_report.txt

integration-tests:
  stage: Test
  image: docker:24.0.2
  rules:
    - if: "$CI_COMMIT_TAG == null"
  services:
    - docker:24.0.2-dind
  allow_failure: true
  before_script:
    - docker info
    - apk add --no-cache bash
  script:
    - docker login -u zdwong9 -p $WORKSHOP_TOKEN registry.gitlab.com/cs302-2023/g1-team1/services/workshop
    - docker pull registry.gitlab.com/cs302-2023/g1-team1/services/workshop:latest
    - container_id=$(docker run -d -p 5001:5001 --platform linux/arm64/v8 registry.gitlab.com/cs302-2023/g1-team1/services/workshop:latest)
    - echo "Container running with ID $container_id"
    - timeout 10 docker logs -f $container_id || true
    # - docker run -d -p 30000:8080 --platform linux/arm64/v8 registry.gitlab.com/cs302-2023/g1-team1/services/workshop:latest
    - chmod +x ci/wait-for-it.sh
    - bash ci/wait-for-it.sh -t 300 localhost:5001 -- echo "WORKSHOP OK"
    - docker compose -f ci/compose.test.yaml up --exit-code-from workshop-part-pytest --build

release-tag:
  stage: Release
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  rules:
    - if: "$CI_COMMIT_TAG != null"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - NEW_TAG=$CI_COMMIT_TAG
    - echo $NEW_TAG
    # BUILD IMAGE WITH COMMIT SHA
    - docker build . -t "$CI_REGISTRY_IMAGE:$NEW_TAG"
    # RETAG IMAGE LATEST WITH DIGEST FROM PREVIOUS IMAGE
    - IMAGE_ID=$(docker images | grep $CI_REGISTRY_IMAGE | awk '{print $3}')
    - docker tag $IMAGE_ID "$CI_REGISTRY_IMAGE:latest"
    # PUSH IMAGE COMMIT SHA and LATEST
    - docker push "$CI_REGISTRY_IMAGE:$NEW_TAG"
    - docker push "$CI_REGISTRY_IMAGE:latest"

release-image:
  stage: Release
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  rules:
    - if: "$CI_COMMIT_TAG == null"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # RETRIEVE ALL IMAGES
    - docker pull $CI_REGISTRY_IMAGE -a
    # FIND LATEST TAG
    - TAG=$(docker images --format "{{.Tag}}" | sort -r -n | head -1)
    - last_element=$(echo "$TAG" | cut -d'.' -f3)
    - previous_elements=$(echo "$TAG" | cut -d'.' -f1-2)
    - incremented_last_element=$((last_element + 1))
    - NEW_TAG="$previous_elements.$incremented_last_element"
    - echo $NEW_TAG
    # BUILD IMAGE WITH COMMIT SHA
    - docker build . -t "$CI_REGISTRY_IMAGE:$NEW_TAG"
    - docker push "$CI_REGISTRY_IMAGE:$NEW_TAG"
    - docker build . -t "$CI_REGISTRY_IMAGE:latest"
    # PUSH IMAGE COMMIT SHA and LATEST
    - docker push "$CI_REGISTRY_IMAGE:latest"

publish:
  stage: Deploy
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  variables:
    APP_NAME: workshop_participation
    ECS_NAME: "wp-service"
  rules:
    - if: "$CI_COMMIT_TAG == null"
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE
    - echo $CI_AWS_ECR_URI
    - echo "$CI_AWS_ECR_URI/$APP_NAME:latest"
    - docker tag "$CI_REGISTRY_IMAGE:latest" "$CI_AWS_ECR_URI/$APP_NAME:latest"
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $CI_AWS_ECR_URI
    - docker push "$CI_AWS_ECR_URI/$APP_NAME:latest"
    - export AWS_PAGER=
    - aws ecs update-service --cluster greenharbor --service $ECS_NAME --force-new-deployment
